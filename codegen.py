from __future__ import division, absolute_import
from __future__ import print_function, unicode_literals
import client as c
import textwrap
import sys

parameters = c.parameters
snake = c.snake

def method_gen(endpoint):
    plist = []
    for param in endpoint['parameters']:
        if not parameters.get(param, None):
            plist.append(snake(param))
        else:
            default = parameters[param]['default']
            if type(default) == str:
                default = "\"{}\"".format(default)
            plist.append(param + '=' + str(default))
    ret = textwrap.dedent("""\
    def {name}({params}):
        frame = inspect.currentframe()
        args, _, _, values = inspect.getargvalues(frame)
        url = \"{url}\"
        ps = dict()
        for a in args:
            ps[a] = values[a]
        query = gen_query(url, ps)
        res = requests.request('GET', query, headers=_headers)
        return res.json()
    """).format(params=(', '.join(plist)),
                name=endpoint['name'], url=endpoint['url'])
    return ret


def main():
    out_name = sys.argv[1]
    with open(out_name, 'w') as fout:
        fout.write("""\
# Automatically generated by codegen.py. DO NOT Modify
from __future__ import division, absolute_import
from __future__ import print_function, unicode_literals
import inspect

import urllib2
try:
    import requests
except ImportError:
    raise ImportError("You need to install requests")

import simple_client as c
byteify = c.byteify
snake = c.snake

_headers = {'Referrer': c.data['referrer'],
            'User-Agent': c.data['user_agent']}


def gen_query(url, params):
    query = []
    for k, v in params.iteritems():
        query.append(urllib2.quote(k) + '=' + urllib2.quote(str(v)))
    query_str = '?' + '&'.join(query)
    return url + query_str


""")
        for endpoint in c.data['stats_endpoints']:
            fout.write(method_gen(endpoint))
            fout.write('\n\n')


if __name__ == '__main__':
    main()
